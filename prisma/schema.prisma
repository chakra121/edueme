// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  email         String              @unique
  password      String
  announcements AdminAnnouncement[] @relation("AdminToAnnouncement")
}

enum UserRole {
  common
  student
}

model AdminAnnouncement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime
  role        UserRole
  adminId     String?  @db.ObjectId
  admin       Admin?   @relation(fields: [adminId], references: [id], name: "AdminToAnnouncement")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  gender         String
  grade          String
  schoolName     String
  phoneNumber    String
  email          String   @unique
  parentEmail    String
  userRole       String
  hashedPassword String
  photoLink      String?
  
  courseID       String?   @db.ObjectId() // One student can have only one course
  teacherID      String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  classLinkId    String?  @db.ObjectId
  classLink      ClassLink? @relation(fields: [classLinkId], references: [id])

  course         Courses? @relation(fields: [courseID], references: [id])
}

model Teacher {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  teacherName    String
  phoneNumber    String
  email          String   @unique
  hashedPassword String
  employeeID     String
  photoLink      String?
  userRole       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // One teacher has only one course
  courseID       String?   @unique @db.ObjectId
  course         Courses? @relation(fields: [courseID],references: [id])
 classLink      ClassLink?
}

model Courses {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  courseCode String   @unique
  courseName String
  teacher    Teacher?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  students   User[]
  chapters   Chapter[]

  classLink  ClassLink?
}



model Chapter {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  chapterCode        String   @unique
  chapterName        String
  chapterDescription String
  isCompleted        Boolean? @default(false)
  notesLink          String?
  courseID           String   @db.ObjectId
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  course             Courses  @relation(fields: [courseID], references: [id], onDelete: Cascade)  
  classes           Class[]

}



model Class {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  classTitle  String?
  youTubeLink String?

  chapterID   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterID], references: [id],onDelete: Cascade)
}

model ClassLink {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  classLink  String
  topics     String[]
  description String
  teacherID  String   @unique @db.ObjectId
  courseID   String   @unique @db.ObjectId
  DateAndTime DateTime
  updatedAt  DateTime @updatedAt

  teacher    Teacher  @relation(fields: [teacherID], references: [id])
  course     Courses  @relation(fields: [courseID], references: [id])

  users      User[]   // Multiple students can be associated with the same class link
}
